{"version":3,"sources":["./src/app/user/user.module.ts","./src/app/user/user.routes.ts","./src/app/user/login.component.html","./src/app/user/login.component.ts","./src/app/user/profile.component.ts","./src/app/user/profile.component.html"],"names":[],"mappings":"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","file":"user-user-module.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from \"@angular/router\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\n\r\nimport { userRoutes } from './user.routes'\r\nimport { ProfileComponent } from \"./profile.component\";\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\n@NgModule({\r\n\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        RouterModule.forChild(userRoutes)\r\n    ],\r\n    declarations: [\r\n        ProfileComponent,\r\n        LoginComponent\r\n    ],\r\n    providers: [\r\n        \r\n    ]\r\n})\r\nexport class UserModule { }","import { ProfileComponent } from \"./profile.component\";\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\nexport const userRoutes = [\r\n    {path: 'profile', component: ProfileComponent},\r\n    {path: 'login', component: LoginComponent}\r\n]","<h1>Login</h1>\r\n<hr>\r\n<div class=\"col-md-4\">\r\n  <form #loginForm=\"ngForm\" (ngSubmit)=\"login(loginForm.value)\" autocomplete=\"off\" novalidate>\r\n    <div class=\"form-group\" >\r\n      <label for=\"userName\">User Name:</label>\r\n      <em *ngIf=\"loginForm.controls.userName?.invalid && (loginForm.controls.userName?.touched || mouseoverLogin)\">Required</em>\r\n      <input (ngModel)=\"userName\" name=\"userName\" id=\"userName\" required type=\"text\" class=\"form-control\" placeholder=\"User Name...\" />\r\n    </div>\r\n    <div class=\"form-group\" >\r\n      <label for=\"password\">Password:</label>\r\n      <em *ngIf=\"loginForm.controls.password?.invalid && (loginForm.controls.password?.touched || mouseoverLogin)\">Required</em>\r\n      <input (ngModel)=\"password\" name=\"password\" id=\"password\" required type=\"password\" class=\"form-control\"placeholder=\"Password...\" />\r\n    </div>\r\n        \r\n    <span (mouseenter)=\"mouseoverLogin=true\" (mouseleave)=\"mouseoverLogin=false\">\r\n      <button type=\"submit\" [disabled]=\"loginForm.invalid\" class=\"btn btn-primary\">Login</button>\r\n    </span>\r\n    <button type=\"button\" (click)=\"cancel()\" class=\"btn btn-default\">Cancel</button>\r\n  </form>\r\n  <br>\r\n  <div *ngIf=\"loginInvalid\" class=\"alert alert-danger\">Invalid Login Info</div>\r\n</div>\r\n","import { Component } from \"@angular/core\";\r\nimport { AuthService } from \"./auth.service\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n    templateUrl: './login.component.html',\r\n    styles: [`\r\n        em { float:right; color:#E05C65; padding-left:10px;}\r\n    `]\r\n})\r\nexport class LoginComponent {\r\n    userName\r\n    password\r\n    mouseoverLogin\r\n    loginInvalid = false;\r\n    \r\n    constructor(private authService:AuthService, private router:Router) {\r\n\r\n    }\r\n\r\n    login(formValues) {\r\n        this.authService.loginUser(formValues.userName, formValues.password)\r\n            .subscribe(resp => {\r\n                if(!resp) {\r\n                    this.loginInvalid = true;\r\n                } else {\r\n                    this.router.navigate(['events'])\r\n                }\r\n            })\r\n    }\r\n\r\n    cancel() {\r\n        this.router.navigate(['events'])\r\n    }\r\n}","import { Component, OnInit, Inject } from '@angular/core'\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms'\r\nimport { AuthService } from './auth.service'\r\nimport { Router } from '@angular/router'\r\nimport { TOASTR_TOKEN, Toastr } from '../common/toastr.service'\r\n\r\n@Component({\r\n  templateUrl: './profile.component.html',\r\n  styles: [`\r\n    em {float:right; color: #E05C65; padding-left: 10px;}\r\n    .error input {background-color:#E3C3C5;}\r\n    .error ::-webkit-input-placeholder { color:#999;}\r\n    .error ::-moz-placeholder { color:#999;}\r\n    .error :-moz-placeholder { color:#999;}\r\n    .error :ms-input-placeholder { color:#999;}\r\n  `]\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  profileForm:FormGroup\r\n  private firstName:FormControl\r\n  private lastName:FormControl\r\n\r\n  constructor(private auth:AuthService,\r\n     private router:Router,\r\n     @Inject(TOASTR_TOKEN) private toastr:Toastr) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.firstName = new FormControl(this.auth.currentUser.firstName, [Validators.required, Validators.pattern('[a-zA-Z].*')])\r\n    this.lastName = new FormControl(this.auth.currentUser.lastName, Validators.required)\r\n    this.profileForm = new FormGroup({\r\n      firstName: this.firstName,\r\n      lastName: this.lastName\r\n    })\r\n  }\r\n\r\n  saveProfile(formValues) {\r\n    if (this.profileForm.valid) {\r\n      this.auth.updateCurrentUser(formValues.firstName, formValues.lastName)\r\n      .subscribe(() => {\r\n        this.toastr.success('Profile Saved');\r\n      })  \r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.auth.logout().subscribe(() => {\r\n      this.router.navigate(['/user/login']);\r\n    })\r\n  }\r\n\r\n  validateFirstName() {\r\n    return this.firstName.valid || this.firstName.untouched\r\n  }\r\n\r\n  validateLastName() {\r\n    return this.lastName.valid || this.lastName.untouched\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['events'])\r\n  }\r\n  \r\n}","<div>\r\n    <h1>Edit Your Profile </h1>\r\n    <hr>\r\n    <div class=\"col-md-4\">\r\n      <form [formGroup]=\"profileForm\" (ngSubmit)=\"saveProfile(profileForm.value)\" autocomplete=\"off\" novalidate>\r\n        <div class=\"form-group\" [ngClass]=\"{'error': !validateFirstName() }\">\r\n          <label for=\"firstName\">First Name:</label>\r\n          <em *ngIf=\"!validateFirstName() && profileForm.controls.firstName.errors.required\">Required</em>\r\n          <em *ngIf=\"!validateFirstName() && profileForm.controls.firstName.errors.pattern\">Must start with a letter</em>\r\n          <input formControlName=\"firstName\" id=\"firstName\" type=\"text\" class=\"form-control\" placeholder=\"First Name...\" />\r\n        </div>\r\n        <div class=\"form-group\" [ngClass]=\"{'error': !validateLastName() }\">\r\n          <label for=\"lastName\">Last Name:</label>\r\n          <em *ngIf=\"!validateLastName()\">Required</em>\r\n          <input formControlName=\"lastName\" id=\"lastName\" type=\"text\" class=\"form-control\" placeholder=\"Last Name...\" />\r\n        </div>\r\n  \r\n        <button type=\"submit\" class=\"btn btn-primary\">Save</button>\r\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">Cancel</button>\r\n\r\n        <button type=\"button\" class=\"btn btn-warning\" style=\"float:right\" (click)=\"logout()\">Logout</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  "],"sourceRoot":"webpack:///"}